// <auto-generated />
using DatabaseAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DatabaseAccess.Migrations
{
    [DbContext(typeof(DbContext))]
    [Migration("20180123205249_AddArbitragesTable")]
    partial class AddArbitragesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("DatabaseAccess.Entities.DbArbitrage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseAsset");

                    b.Property<string>("BuyingExchange");

                    b.Property<bool>("IsBaseCurrencyBalanceSufficient");

                    b.Property<bool>("IsProfitable");

                    b.Property<bool>("IsQuoteCurrencyBalanceSufficient");

                    b.Property<string>("QuoteAsset");

                    b.Property<string>("SellingExchange");

                    b.HasKey("Id");

                    b.ToTable("Arbitrages");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.DbTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ArbitrageId");

                    b.Property<string>("BaseAsset");

                    b.Property<string>("Description");

                    b.Property<string>("ExtOrderId");

                    b.Property<string>("QuoteAsset");

                    b.Property<string>("Source");

                    b.Property<string>("SourceAsset");

                    b.Property<decimal>("SourceFee");

                    b.Property<decimal>("SourceSentAmount");

                    b.Property<string>("Target");

                    b.Property<string>("TargetAsset");

                    b.Property<decimal>("TargetFee");

                    b.Property<decimal>("TargetReceivedAmount");

                    b.Property<DateTime>("Timestamp");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ArbitrageId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("DatabaseAccess.Entities.DbArbitrage", b =>
                {
                    b.OwnsOne("DatabaseAccess.DbPercentageValue", "EstimatedAvgNegativeSpreadPercentage", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<decimal>("PercentageRatio");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("EstimatedAvgNegativeSpreadPercentage")
                                .HasForeignKey("DatabaseAccess.DbPercentageValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPercentageValue", "MaxNegativeSpreadPercentage", b1 =>
                        {
                            b1.Property<int>("DbArbitrageId");

                            b1.Property<decimal>("PercentageRatio");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxNegativeSpreadPercentage")
                                .HasForeignKey("DatabaseAccess.DbPercentageValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPercentageValue", "MaxProfitPercentage", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<decimal>("PercentageRatio");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxProfitPercentage")
                                .HasForeignKey("DatabaseAccess.DbPercentageValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "BaseCurrencyBalance", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("BaseCurrencyBalance")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "BestBuyPrice", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("BestBuyPrice")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "BestSellPrice", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("BestSellPrice")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "BuyLimitPricePerUnit", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("BuyLimitPricePerUnit")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "EstimatedAvgBuyUnitPrice", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("EstimatedAvgBuyUnitPrice")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "EstimatedAvgNegativeSpread", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("EstimatedAvgNegativeSpread")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "EstimatedAvgSellUnitPrice", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("EstimatedAvgSellUnitPrice")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "MaxBaseCurrencyAmountToArbitrage", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxBaseCurrencyAmountToArbitrage")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "MaxBuyFee", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxBuyFee")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "MaxNegativeSpread", b1 =>
                        {
                            b1.Property<int>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxNegativeSpread")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "MaxQuoteCurrencyAmountToSpend", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxQuoteCurrencyAmountToSpend")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "MaxQuoteCurrencyProfit", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxQuoteCurrencyProfit")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "MaxQuoteCurrencyToEarn", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxQuoteCurrencyToEarn")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "MaxSellFee", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("MaxSellFee")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DatabaseAccess.DbPriceValue", "QuoteCurrencyBalance", b1 =>
                        {
                            b1.Property<int?>("DbArbitrageId");

                            b1.Property<string>("Asset");

                            b1.Property<decimal>("Value");

                            b1.ToTable("Arbitrages");

                            b1.HasOne("DatabaseAccess.Entities.DbArbitrage")
                                .WithOne("QuoteCurrencyBalance")
                                .HasForeignKey("DatabaseAccess.DbPriceValue", "DbArbitrageId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DatabaseAccess.Entities.DbTransaction", b =>
                {
                    b.HasOne("DatabaseAccess.Entities.DbArbitrage", "Arbitrage")
                        .WithMany("Transactions")
                        .HasForeignKey("ArbitrageId");
                });
#pragma warning restore 612, 618
        }
    }
}
